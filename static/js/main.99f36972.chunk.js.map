{"version":3,"sources":["components/TitleBar.jsx","pareto.png","components/PopulationInput.jsx","components/PopulationResult.jsx","components/PopulationCalculator.jsx","App.js","reportWebVitals.js","index.js"],"names":["TitleBar","state","className","Component","PopulationInput","htmlFor","type","id","onChange","evt","props","onPopulationChange","target","value","data-toggle","href","role","aria-expanded","aria-controls","this","shapeParameter","min","max","step","onShapeParameterChange","src","pareto","style","width","display","alt","PopulationResult","popLevels","_","range","getPopAtLevel","totalPop","level","a","parseFloat","x","fx","Math","round","getPopulationLevels","pop","population","format","Intl","NumberFormat","map","lvl","Fragment","PopulationCalculator","handlePopulationChange","setState","handleShapeParameterChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99f36972.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TitleBar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"bg-white py-5 text-center\">\r\n        <h2>D&amp;D world population levels</h2>\r\n        <p className=\"lead\">\r\n          The 80/20 principle (power law) applies in many contexts. It is\r\n          reasonable to expect that in the world of D&amp;D, the distribution of\r\n          character levels in the world population should follow a power law\r\n          probability distribution. This utility can tell you how many level 20\r\n          (etc.) characters should inhabit the world (other than your players).\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TitleBar;\r\n","export default __webpack_public_path__ + \"static/media/pareto.76326019.png\";","import React, { Component } from \"react\";\r\nimport pareto from \"../pareto.png\";\r\n\r\nclass PopulationInput extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"py-2\">\r\n        <form>\r\n          <div className=\"form-group row\">\r\n            <div className=\"col-lg-2 col-md-3\">\r\n              <label htmlFor=\"population\" className=\"col-form-label\">\r\n                Population\r\n              </label>\r\n            </div>\r\n            <div className=\"col-lg-4 col-md-6\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                id=\"population\"\r\n                onChange={(evt) =>\r\n                  this.props.onPopulationChange(evt.target.value)\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"form-group form-check col-lg-6 col-md-3\">\r\n              <div className=\"ml-3\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"form-check-input my-2\"\r\n                  id=\"commonerBreakdown\"\r\n                />\r\n                <label className=\"form-check-label\" htmlFor=\"commonerBreakdown\">\r\n                  Break down commoners into trades and professions\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"powerCurveFactor\">\r\n              Shape Parameter (adjust power curve)\r\n              <sup>\r\n                <a\r\n                  data-toggle=\"collapse\"\r\n                  href=\"#shapeParameterInfo\"\r\n                  role=\"button\"\r\n                  aria-expanded=\"false\"\r\n                  aria-controls=\"shapeParameterInfo\"\r\n                >\r\n                  ?\r\n                </a>\r\n              </sup>\r\n              <span className=\"badge badge-light\">\r\n                &nbsp;= {this.props.shapeParameter}\r\n              </span>\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              className=\"form-control-range\"\r\n              id=\"powerCurveFactor\"\r\n              min=\"0.1\"\r\n              max=\"10\"\r\n              value={this.props.shapeParameter}\r\n              step=\"0.05\"\r\n              onChange={(evt) =>\r\n                this.props.onShapeParameterChange(evt.target.value)\r\n              }\r\n            />\r\n            <p></p>\r\n          </div>\r\n        </form>\r\n        <div className=\"collapse mb-4\" id=\"shapeParameterInfo\">\r\n          <div className=\"card card-body\">\r\n            <p>\r\n              The shape parameter (&alpha;) adjusts how quickly the power curve\r\n              falls off. A higher value will mean that the higher levels are\r\n              much more rare.\r\n            </p>\r\n            <p>\r\n              The Pareto principle (80-20 rule) applies to many real-world\r\n              distributions. For example, 80% of the people live in 20% of the\r\n              settlements; or, 80% of the oil is found in 20% of the oil fields.\r\n              The 80-20 rule corresponds to a shape parameter of\r\n              &alpha;&nbsp;&asymp;&nbsp;1.161.\r\n            </p>\r\n            <p>\r\n              If your fantasy world has experience points distributed among the\r\n              population in a similar way to how wealth or resources are\r\n              distributed in the real world, then set the scale parameter to\r\n              1.15 or 1.20.\r\n            </p>\r\n            <p>\r\n              If high level characters are much more rare in your fantasy world,\r\n              then set the scale parameter to a higher value.\r\n            </p>\r\n            <p>\r\n              The <i>Population</i> input can also be set to a the population of\r\n              a town, city or province to determine how many high level\r\n              characters to expect in that region.\r\n            </p>\r\n            <p>\r\n              The XP requirement for each character level in 5th Edition follows\r\n              an exponential curve that is approximately defined by the{\" \"}\r\n              <a href=\"https://www.desmos.com/calculator/ntxr8zoaq0\">\r\n                following function\r\n              </a>\r\n              :\r\n              <br />\r\n              <i>\r\n                346.793 &times; lvl\r\n                <sup>2.34618</sup>\r\n              </i>{\" \"}\r\n              (with R&sup2; = 0.9988)\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {\r\n          // replace this with plotly\r\n        }\r\n        <img\r\n          src={pareto}\r\n          className=\"mx-auto\"\r\n          style={{ width: 300, display: \"block\" }}\r\n          alt=\"placeholder\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PopulationInput;\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nclass PopulationResult extends Component {\r\n  state = {\r\n    popLevels: _.range(21),\r\n  };\r\n\r\n  getPopAtLevel = (totalPop, level) => {\r\n    const a = parseFloat(this.props.shapeParameter);\r\n    const m = 1;\r\n    const x = level + 1;\r\n    let fx = (a * m ** a) / x ** (a + 1) / a;\r\n    return Math.round(totalPop * fx);\r\n  };\r\n\r\n  getPopulationLevels = () => {\r\n    const pop = this.props.population || 1000000;\r\n\r\n    const format = new Intl.NumberFormat(\"en-GB\").format;\r\n\r\n    return this.state.popLevels.map((lvl) => (\r\n      <React.Fragment key={lvl}>\r\n        <div className=\"row mb-3 m-1\" key={\"row\" + { lvl }}>\r\n          <div className=\"col-md-3\" key={\"level\" + { lvl }}>\r\n            Level {lvl}\r\n          </div>\r\n          <div className=\"col-md-2 text-right\" key={\"pop\" + { lvl }}>\r\n            {format(this.getPopAtLevel(pop, lvl))}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    ));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"min-vh-100 bg-light p-2\">\r\n        <h4>Population results</h4>\r\n        {this.getPopulationLevels()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PopulationResult;\r\n","import React, { Component } from \"react\";\r\n\r\nimport PopulationInput from \"./PopulationInput\";\r\nimport PopulationResult from \"./PopulationResult\";\r\n\r\nclass PopulationCalculator extends Component {\r\n  state = { population: 1000000, shapeParameter: 1.15 };\r\n\r\n  handlePopulationChange = (population) => {\r\n    if (population < 1) {\r\n      population = 1;\r\n    }\r\n    this.setState({ population });\r\n  };\r\n\r\n  handleShapeParameterChange = (shapeParameter) => {\r\n    this.setState({ shapeParameter });\r\n  };\r\n\r\n  render() {\r\n    const { shapeParameter } = this.state;\r\n    return (\r\n      <div>\r\n        <PopulationInput\r\n          onPopulationChange={this.handlePopulationChange}\r\n          onShapeParameterChange={this.handleShapeParameterChange}\r\n          shapeParameter={shapeParameter}\r\n        />\r\n        <hr />\r\n        <PopulationResult\r\n          population={this.state.population}\r\n          shapeParameter={shapeParameter}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PopulationCalculator;\r\n","import \"./App.css\";\r\nimport TitleBar from \"./components/TitleBar\";\r\nimport PopulationCalculator from \"./components/PopulationCalculator\";\r\nimport React from \"react\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <main role=\"main\" className=\"container\">\r\n        <TitleBar />\r\n        <PopulationCalculator />\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"jquery\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}